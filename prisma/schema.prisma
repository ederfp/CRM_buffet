datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}
// Enums
enum Role {
  ADMIN
  MANAGER
  SALES
  OPERATIONS
  FINANCE
  VIEWER
}
enum LeadStatus {
  NEW
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
  RECYCLE
}
enum EventType {
  CORPORATE
  WEDDING
  KIDS
  COFFEE_BREAK
  COCKTAIL
  LUNCH
  DINNER
  OTHER
}
enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  APPROVED
  REJECTED
  EXPIRED
  CANCELLED
}
enum ContractStatus {
  DRAFT
  SIGNED
  CANCELLED
}
enum PaymentMethod {
  PIX
  BOLETO
  CARD
  CASH
  TRANSFER
}
enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
enum ResourceType {
  EQUIPMENT
  VEHICLE
  SPACE
  OTHER
}
enum ChecklistStatus {
  PENDING
  IN_PROGRESS
  DONE
}
enum StockMovementType {
  IN
  OUT
  ADJUST
}
enum PurchaseStatus {
  DRAFT
  REQUESTED
  ORDERED
  RECEIVED_PARTIAL
  RECEIVED
  CANCELLED
}
enum TeamMemberType {
  EMPLOYEE
  FREELANCER
  THIRD_PARTY
}
enum OccurrenceSeverity {
  LOW
  MEDIUM
  HIGH
}
enum TaxType {
  SERVICE_FEE
  DELIVERY_FEE
  OTHER
}
// Base Models
model Company {
  id           String   @id @default(cuid())
  name         String
  document     String?  // CNPJ/CPF
  email        String?
  phone        String?
  branding     Json?    // logos, colors
  settings     Json?    // system configs
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        User[]
  customers    Customer[]
  leads        Lead[]
  opportunities Opportunity[]
  proposals    Proposal[]
  contracts    Contract[]
  events       Event[]
  menus        Menu[]
  items        Item[]
  resources    Resource[]
  teamMembers  TeamMember[]
  stockItems   StockItem[]
  suppliers    Supplier[]
  purchases    PurchaseOrder[]
  ar           Receivable[]
  ap           Payable[]
  activities   ActivityLog[]
  webhooks     IntegrationWebhook[]
  contacts     Contact[]
  productionOrders ProductionOrder[]
  tasks        Task[]
  surveys      Survey[]
  campaigns    Campaign[]
  customerPortalSessions CustomerPortalSession[]
  integrationEvents IntegrationEvent[]
  stockMovements StockMovement[]
}
model User {
  id            String   @id @default(cuid())
  companyId     String
  email         String   @unique
  name          String
  phone         String?
  role          Role     @default(VIEWER)
  passwordHash  String
  mfaEnabled    Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  company       Company  @relation(fields: [companyId], references: [id])
  activities    ActivityLog[]
  tasks         Task[]
  assignedLeads Lead[] @relation("LeadAssignedTo")
  assignedOpportunities Opportunity[] @relation("OpportunityAssignedTo")
  checklistItems ChecklistItem[]
  createdOccurrences Occurrence[]
}
// CRM: Pessoas/Clientes/Leads/Oportunidades
model Customer {
  id            String   @id @default(cuid())
  companyId     String
  type          String   // PERSON or COMPANY
  name          String
  email         String?
  phone         String?
  document      String?  // CPF/CNPJ
  address       Json?    // {street, number, city, state, zip, complement}
  customFields  Json?
  consentAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  company       Company  @relation(fields: [companyId], references: [id])
  contacts      Contact[]
  leads         Lead[]
  opportunities Opportunity[]
  events        Event[]
  proposals     Proposal[]
  contracts     Contract[]
  portalSessions CustomerPortalSession[]
  receivables   Receivable[]
  surveys       Survey[]
  tasks         Task[]
  activityLogs  ActivityLog[]
}
model Contact {
  id          String   @id @default(cuid())
  companyId   String
  customerId  String
  name        String
  email       String?
  phone       String?
  position    String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
}
model Lead {
  id            String   @id @default(cuid())
  companyId     String
  customerId    String?
  source        String?    // canal
  tags          String?    // JSON array of tags
  status        LeadStatus @default(NEW)
  assignedToId  String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lostReason    String?
  company       Company  @relation(fields: [companyId], references: [id])
  customer      Customer? @relation(fields: [customerId], references: [id])
  assignedTo    User?     @relation("LeadAssignedTo", fields: [assignedToId], references: [id])
  activities    ActivityLog[]
  tasks         Task[]
  opportunity   Opportunity?
}
model Opportunity {
  id             String   @id @default(cuid())
  companyId      String
  customerId     String
  leadId         String?  @unique
  title          String
  stage          LeadStatus @default(QUALIFIED)
  valueExpected  Float?    // Using Float instead of Decimal for SQLite
  probability    Int?      // %
  assignedToId   String?
  reasonLost     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id])
  customer       Customer @relation(fields: [customerId], references: [id])
  lead           Lead?    @relation(fields: [leadId], references: [id])
  assignedTo     User?    @relation("OpportunityAssignedTo", fields: [assignedToId], references: [id])
  proposal       Proposal?
  tasks          Task[]
  activityLogs   ActivityLog[]
}
// Catálogo, Itens, Fichas técnicas e Cardápios
model Item {
  id            String   @id @default(cuid())
  companyId     String
  name          String
  sku           String?
  category      String       // "dish","beverage","rental","service"
  unit          String       // ex: kg, un, pacote, hora
  yieldPerUnit  Float?       // rendimento por unidade base
  portionSize   Float?       // porção por pessoa (quando aplicável)
  lossPercent   Float?       // perdas %
  costUnit      Float?       // Using Float instead of Decimal
  prepTimeMin   Int?         // tempo preparo
  notes         String?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  compositions  ItemComposition[] @relation("ItemCompositionParent")
  menuItems     MenuItem[]
  stockItems    StockItem[] // ligação com estoque físico (opcional)
  proposalItems ProposalItem[]
  eventMenuItems EventMenuItem[]
  purchaseItems PurchaseItem[]
  childCompositions ItemComposition[] @relation("ItemCompositionChild")
}
model ItemComposition {
  id           String   @id @default(cuid())
  parentItemId String
  childItemId  String
  qty          Float    // quantidade do componente
  unit         String
  parentItem   Item @relation("ItemCompositionParent", fields: [parentItemId], references: [id])
  childItem    Item @relation("ItemCompositionChild", fields: [childItemId], references: [id])
  @@index([parentItemId])
  @@index([childItemId])
}
model Menu {
  id            String   @id @default(cuid())
  companyId     String
  name          String
  eventType     EventType?
  description   String?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  items         MenuItem[]
}
model MenuItem {
  id        String   @id @default(cuid())
  menuId    String
  itemId    String
  qtyPerPerson Float? // por pessoa
  fixedQty  Float?    // quantidade fixa
  position  Int?
  menu      Menu @relation(fields: [menuId], references: [id])
  item      Item @relation(fields: [itemId], references: [id])
  @@unique([menuId, itemId])
}
// Propostas, Contratos e Eventos
model Proposal {
  id              String   @id @default(cuid())
  companyId       String
  opportunityId   String?  @unique
  customerId      String
  version         Int      @default(1)
  status          ProposalStatus @default(DRAFT)
  title           String
  notes           String?
  priceSubtotal   Float    // Using Float instead of Decimal
  discountTotal   Float    // Using Float instead of Decimal
  taxTotal        Float    // Using Float instead of Decimal
  priceTotal      Float    // Using Float instead of Decimal
  paymentSchedule Json?      // [{dueDate, amount, method}]
  expiresAt       DateTime?
  sentAt          DateTime?
  viewedAt        DateTime?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  linkToken       String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  company         Company   @relation(fields: [companyId], references: [id])
  opportunity     Opportunity? @relation(fields: [opportunityId], references: [id])
  customer        Customer  @relation(fields: [customerId], references: [id])
  items           ProposalItem[]
  fees            ProposalFee[]
  contract        Contract?
  event           Event?
  activities      ActivityLog[]
  customerPortalSessions CustomerPortalSession[]
}
model ProposalItem {
  id           String   @id @default(cuid())
  proposalId   String
  itemId       String?
  name         String    // snapshot nome
  category     String?
  unit         String?
  qty          Float
  unitPrice    Float     // Using Float instead of Decimal
  costUnit     Float?    // Using Float instead of Decimal
  discount     Float     // Using Float instead of Decimal
  total        Float     // Using Float instead of Decimal
  notes        String?
  proposal     Proposal @relation(fields: [proposalId], references: [id])
  item         Item?    @relation(fields: [itemId], references: [id])
  @@index([proposalId])
}
model ProposalFee {
  id           String   @id @default(cuid())
  proposalId   String
  name         String
  type         TaxType?
  amount       Float     // Using Float instead of Decimal
  percentage   Float?    // opcional
  notes        String?
  proposal     Proposal @relation(fields: [proposalId], references: [id])
}
model Contract {
  id            String   @id @default(cuid())
  companyId     String
  proposalId    String  @unique
  customerId    String
  status        ContractStatus @default(DRAFT)
  content       String?   // HTML/Markdown do contrato gerado
  signedAt      DateTime?
  signedBy      String?
  signerIp      String?
  auditTrail    Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  proposal      Proposal @relation(fields: [proposalId], references: [id])
  customer      Customer @relation(fields: [customerId], references: [id])
  receivables   Receivable[]
}
model Event {
  id             String   @id @default(cuid())
  companyId      String
  proposalId     String?  @unique
  customerId     String
  name           String
  eventType      EventType
  date           DateTime
  endDate        DateTime?
  guestsExpected Int
  guestsFinal    Int?
  venue          Json?        // endereço do evento
  notes          String?
  status         String       // pre-reserved, reserved, production, done, cancelled
  capacitySlot   String?      // dia/turno opcional para bloqueio
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id])
  proposal       Proposal? @relation(fields: [proposalId], references: [id])
  customer       Customer @relation(fields: [customerId], references: [id])
  menuSnapshots  EventMenuItem[]
  allocations    EventResource[]
  team           EventTeam[]
  checklists     Checklist[]
  ops            ProductionOrder[]
  occurrences    Occurrence[]
  ar             Receivable[]
  ap             Payable[]
  surveys        Survey[]
  tasks          Task[]
  activityLogs   ActivityLog[]
  customerPortalSessions CustomerPortalSession[]
}
model EventMenuItem {
  id         String   @id @default(cuid())
  eventId    String
  itemId     String?
  name       String    // snapshot
  unit       String?
  qty        Float
  perPerson  Boolean   @default(false)
  notes      String?
  event      Event @relation(fields: [eventId], references: [id])
  item       Item?  @relation(fields: [itemId], references: [id])
  @@index([eventId])
}
// Agenda, Recursos e Equipe
model Resource {
  id           String   @id @default(cuid())
  companyId    String
  name         String
  type         ResourceType
  capacity     Int?       // quando aplicável
  attributes   Json?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])
  allocations  EventResource[]
}
model EventResource {
  id          String   @id @default(cuid())
  eventId     String
  resourceId  String
  startAt     DateTime
  endAt       DateTime
  notes       String?
  event       Event    @relation(fields: [eventId], references: [id])
  resource    Resource @relation(fields: [resourceId], references: [id])
  @@unique([resourceId, startAt, endAt])
  @@index([eventId])
}
model TeamMember {
  id           String   @id @default(cuid())
  companyId    String
  name         String
  type         TeamMemberType
  role         String?   // ex: garçom, chef, motorista
  hourlyRate   Float?    // Using Float instead of Decimal
  phone        String?
  email        String?
  notes        String?
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime @updatedAt
  company      Company   @relation(fields: [companyId], references: [id])
  allocations  EventTeam[]
}
model EventTeam {
  id             String   @id @default(cuid())
  eventId        String
  teamMemberId   String
  roleAtEvent    String?
  startAt        DateTime
  endAt          DateTime
  allowance      Float?    // Using Float instead of Decimal
  notes          String?
  event          Event      @relation(fields: [eventId], references: [id])
  teamMember     TeamMember @relation(fields: [teamMemberId], references: [id])
  @@index([eventId])
  @@index([teamMemberId, startAt, endAt])
}
// Produção: OP, Checklists e Ocorrências
model ProductionOrder {
  id          String   @id @default(cuid())
  companyId   String
  eventId     String
  number      String   @unique
  status      String   // draft, planned, in_progress, done
  shoppingList Json?   // consolidada
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company @relation(fields: [companyId], references: [id])
  event       Event   @relation(fields: [eventId], references: [id])
  steps       ProductionStep[]
}
model ProductionStep {
  id          String   @id @default(cuid())
  productionOrderId String
  name        String
  description String?
  position    Int?
  status      ChecklistStatus @default(PENDING)
  startedAt   DateTime?
  finishedAt  DateTime?
  productionOrder ProductionOrder @relation(fields: [productionOrderId], references: [id])
  @@index([productionOrderId])
}
model Checklist {
  id          String   @id @default(cuid())
  eventId     String
  name        String
  type        String // pre, dispatch, on_site, return
  items       ChecklistItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event @relation(fields: [eventId], references: [id])
}
model ChecklistItem {
  id           String   @id @default(cuid())
  checklistId  String
  description  String
  status       ChecklistStatus @default(PENDING)
  assigneeId   String?
  checkedAt    DateTime?
  notes        String?
  checklist    Checklist @relation(fields: [checklistId], references: [id])
  assignee     User?     @relation(fields: [assigneeId], references: [id])
  @@index([checklistId])
}
model Occurrence {
  id          String   @id @default(cuid())
  eventId     String
  severity    OccurrenceSeverity
  title       String
  description String?
  createdById String?
  createdAt   DateTime @default(now())
  event       Event @relation(fields: [eventId], references: [id])
  createdBy   User?  @relation(fields: [createdById], references: [id])
  @@index([eventId])
}
// Estoque e Compras
model StockItem {
  id           String   @id @default(cuid())
  companyId    String
  itemId       String
  sku          String?
  trackBatch   Boolean  @default(false)
  minQty       Float?   // estoque mínimo
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company @relation(fields: [companyId], references: [id])
  item         Item    @relation(fields: [itemId], references: [id])
  lots         StockLot[]
  movements    StockMovement[]
}
model StockLot {
  id           String   @id @default(cuid())
  stockItemId  String
  batch        String?
  qty          Float     @default(0)
  unit         String
  expiration   DateTime?
  costUnit     Float?    // Using Float instead of Decimal
  stockItem    StockItem @relation(fields: [stockItemId], references: [id])
  movements    StockMovement[]
  @@index([stockItemId])
}
model StockMovement {
  id           String   @id @default(cuid())
  companyId    String
  stockItemId  String
  stockLotId   String?
  type         StockMovementType
  qty          Float
  unit         String
  refType      String? // EVENT, PO, ADJUST
  refId        String?
  notes        String?
  createdAt    DateTime @default(now())
  company      Company   @relation(fields: [companyId], references: [id])
  stockItem    StockItem @relation(fields: [stockItemId], references: [id])
  stockLot     StockLot? @relation(fields: [stockLotId], references: [id])
  @@index([companyId, stockItemId])
  @@index([refType, refId])
}
model Supplier {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  document    String?
  email       String?
  phone       String?
  address     Json?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  purchases   PurchaseOrder[]
  payables    Payable[]
}
model PurchaseOrder {
  id          String   @id @default(cuid())
  companyId   String
  supplierId  String
  number      String   @unique
  status      PurchaseStatus @default(DRAFT)
  expectedAt  DateTime?
  receivedAt  DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  items       PurchaseItem[]
}
model PurchaseItem {
  id             String   @id @default(cuid())
  purchaseOrderId String
  itemId         String?
  description    String
  qty            Float
  unit           String
  unitPrice      Float     // Using Float instead of Decimal
  total          Float     // Using Float instead of Decimal
  purchaseOrder  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  item           Item?         @relation(fields: [itemId], references: [id])
  @@index([purchaseOrderId])
}
// Financeiro (AR/AP)
model Receivable {
  id            String   @id @default(cuid())
  companyId     String
  eventId       String?
  customerId    String
  contractId    String?
  description   String
  dueDate       DateTime
  amount        Float     // Using Float instead of Decimal
  method        PaymentMethod?
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  externalId    String?  // gateway id
  reference     String?  // nosso número, txid etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  event         Event?   @relation(fields: [eventId], references: [id])
  customer      Customer @relation(fields: [customerId], references: [id])
  contract      Contract? @relation(fields: [contractId], references: [id])
  payments      Payment[]
}
model Payable {
  id            String   @id @default(cuid())
  companyId     String
  eventId       String?
  supplierId    String?
  description   String
  dueDate       DateTime
  amount        Float     // Using Float instead of Decimal
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  event         Event?   @relation(fields: [eventId], references: [id])
  supplier      Supplier? @relation(fields: [supplierId], references: [id])
}
model Payment {
  id            String   @id @default(cuid())
  receivableId  String
  amount        Float     // Using Float instead of Decimal
  method        PaymentMethod
  status        PaymentStatus @default(PAID)
  paidAt        DateTime      @default(now())
  gatewayData   Json?
  receivable    Receivable @relation(fields: [receivableId], references: [id])
  @@index([receivableId])
}
// Atividades, Tarefas, Logs, Integrações
model Task {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?
  dueAt       DateTime?
  status      String    // open, done, cancelled
  priority    Int?      // 1-5
  assigneeId  String?
  leadId      String?
  opportunityId String?
  eventId     String?
  customerId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  lead        Lead?    @relation(fields: [leadId], references: [id])
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id])
  event       Event?   @relation(fields: [eventId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  @@index([companyId, assigneeId])
  @@index([leadId])
  @@index([opportunityId])
  @@index([eventId])
}
model ActivityLog {
  id          String   @id @default(cuid())
  companyId   String
  userId      String?
  leadId      String?
  opportunityId String?
  proposalId  String?
  eventId     String?
  customerId  String?
  type        String   // email, whatsapp, call, system, view, approval
  message     String?
  meta        Json?
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  lead        Lead?    @relation(fields: [leadId], references: [id])
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id])
  proposal    Proposal? @relation(fields: [proposalId], references: [id])
  event       Event?    @relation(fields: [eventId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  @@index([companyId, type, createdAt])
}
// Satisfação/NPS
model Survey {
  id          String   @id @default(cuid())
  companyId   String
  eventId     String?
  customerId  String
  token       String   @unique
  answers     Json?
  npsScore    Int?
  sentAt      DateTime?
  respondedAt DateTime?
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
  event       Event?   @relation(fields: [eventId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
}
model Campaign {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  channel     String // email, whatsapp, sms
  segment     Json?  // filtros
  content     String
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
}
// Portal do Cliente
model CustomerPortalSession {
  id          String   @id @default(cuid())
  companyId   String
  customerId  String
  proposalId  String?
  eventId     String?
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
  proposal    Proposal? @relation(fields: [proposalId], references: [id])
  event       Event?    @relation(fields: [eventId], references: [id])
}
// Integrações
model IntegrationWebhook {
  id          String   @id @default(cuid())
  companyId   String
  provider    String   // payments, whatsapp, calendars
  endpoint    String
  secret      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
}
model IntegrationEvent {
  id          String   @id @default(cuid())
  companyId   String
  provider    String
  type        String
  payload     Json
  processedAt DateTime?
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
  @@index([companyId, provider, type, createdAt])
}